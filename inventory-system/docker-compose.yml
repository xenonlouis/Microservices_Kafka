version: '3.8'

services:
  # Infrastructure services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Databases
  postgres-products:
    image: postgres:latest
    environment:
      POSTGRES_DB: products
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_products_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d products"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-orders:
    image: postgres:latest
    environment:
      POSTGRES_DB: orders
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d orders"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-notifications:
    image: postgres:latest
    environment:
      POSTGRES_DB: notifications
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5434:5432"
    volumes:
      - postgres_notifications_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d notifications"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Config Server
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservices
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      postgres-products:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-products:5432/products
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      config-server:
        condition: service_healthy
      postgres-orders:
        condition: service_healthy
      kafka:
        condition: service_healthy
      product-service:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-orders:5432/orders
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PRODUCT_SERVICE_URL: http://product-service:8081

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      config-server:
        condition: service_healthy
      postgres-notifications:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-notifications:5432/notifications
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      config-server:
        condition: service_healthy
      product-service:
        condition: service_started
      order-service:
        condition: service_started
      notification-service:
        condition: service_started
    environment:
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888

volumes:
  postgres_products_data:
  postgres_orders_data:
  postgres_notifications_data: 